<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<template name="updateContact" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="id" description="Id of the contact to be updated"/>
    <parameter name="replace" description="Boolean value of 1/0"/>
    <parameter name="fields"
               description="Describes a dictionary organized in the same structure as a contact listing response"/>
    <parameter name="avatarUrl" description="Avatar url to be added"/>
    <sequence>
        <property name="uri.var.id" expression="$func:id"/>
        <property name="uri.var.replace" expression="$func:replace"/>
        <property name="uri.var.fields" expression="$func:fields"/>
        <property name="uri.var.avatarUrl" expression="$func:avatarUrl"/>
        <property name="uri.var.isImportant" expression="$func:isImportant"/>
        <payloadFactory media-type="json">
            <format>
                {
                    "fields":"$1",
                    "avatar_url":"$2",
                    "is_important":"$3"
                }
            </format>
            <args>
                <arg expression="get-property('uri.var.fields')"/>
                <arg expression="get-property('uri.var.avatarUrl')"/>
            </args>
        </payloadFactory>
        <filter xpath="get-property('uri.var.fields') = '' or (not(string(get-property('uri.var.fields'))))">
            <then>
                <script language="js">
                    <![CDATA[
                        var payload = mc.getPayloadJSON();
                        delete payload["fields"];
                        mc.setPayloadJSON(payload);
                    ]]>
                </script>
            </then>
        </filter>
        <filter xpath="get-property('uri.var.isImportant') = '' or (not(string(get-property('uri.var.isImportant'))))">
            <then>
                <script language="js">
                    <![CDATA[
                        var payload = mc.getPayloadJSON();
                        delete payload["is_important"];
                        mc.setPayloadJSON(payload);
                    ]]>
                </script>
            </then>
        </filter>
        <filter xpath="get-property('uri.var.avatarUrl') = '' or (not(string(get-property('uri.var.avatarUrl'))))">
            <then>
                <script language="js">
                    <![CDATA[
                        var payload = mc.getPayloadJSON();
                        delete payload["avatar_url"];
                        mc.setPayloadJSON(payload);
                    ]]>
                </script>
            </then>
        </filter>
        <filter xpath="(not(get-property('uri.var.replace') = '' or (not(string(get-property('uri.var.replace'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'replace=',get-property('uri.var.replace'))"/>
            </then>
        </filter>
        <property name="messageType" value="application/json"
                  scope="axis2"/>
        <header name="Content-Type" value="application/json" scope="transport"/>
        <call>
            <endpoint>
                <http method="put"
                      uri-template="{uri.var.apiUrl}/contact/{uri.var.id}?{uri.var.apiParameters}"/>
            </endpoint>
        </call>
    </sequence>
</template>

